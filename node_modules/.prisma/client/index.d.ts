import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.6.1
 * Query Engine version: 6a8054bb549e4cc23f157b0010cb2e95cb2637fb
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Comments
 * const comments = await prisma.comments.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Comments
   * const comments = await prisma.comments.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$executeRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.comments`: Exposes CRUD operations for the **Comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comments.findMany()
    * ```
    */
  get comments(): CommentsDelegate;

  /**
   * `prisma.posts`: Exposes CRUD operations for the **Posts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.posts.findMany()
    * ```
    */
  get posts(): PostsDelegate;

  /**
   * `prisma.sequelizeMeta`: Exposes CRUD operations for the **SequelizeMeta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SequelizeMetas
    * const sequelizeMetas = await prisma.sequelizeMeta.findMany()
    * ```
    */
  get sequelizeMeta(): SequelizeMetaDelegate;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): UsersDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const CommentsDistinctFieldEnum: {
  uuid: 'uuid',
  postId: 'postId',
  comment: 'comment',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

export declare type CommentsDistinctFieldEnum = (typeof CommentsDistinctFieldEnum)[keyof typeof CommentsDistinctFieldEnum]


export declare const PostsDistinctFieldEnum: {
  uuid: 'uuid',
  title: 'title',
  content: 'content',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

export declare type PostsDistinctFieldEnum = (typeof PostsDistinctFieldEnum)[keyof typeof PostsDistinctFieldEnum]


export declare const SequelizeMetaDistinctFieldEnum: {
  name: 'name'
};

export declare type SequelizeMetaDistinctFieldEnum = (typeof SequelizeMetaDistinctFieldEnum)[keyof typeof SequelizeMetaDistinctFieldEnum]


export declare const UsersDistinctFieldEnum: {
  uuid: 'uuid',
  name: 'name',
  lastname: 'lastname',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

export declare type UsersDistinctFieldEnum = (typeof UsersDistinctFieldEnum)[keyof typeof UsersDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]



/**
 * Model Comments
 */

export type Comments = {
  uuid: string
  postId: number | null
  comment: string | null
  userId: number | null
  createdAt: Date
  updatedAt: Date
  deletedAt: Date | null
}


export type AggregateComments = {
  count: number
  avg: CommentsAvgAggregateOutputType | null
  sum: CommentsSumAggregateOutputType | null
  min: CommentsMinAggregateOutputType | null
  max: CommentsMaxAggregateOutputType | null
}

export type CommentsAvgAggregateOutputType = {
  postId: number
  userId: number
}

export type CommentsSumAggregateOutputType = {
  postId: number | null
  userId: number | null
}

export type CommentsMinAggregateOutputType = {
  postId: number | null
  userId: number | null
}

export type CommentsMaxAggregateOutputType = {
  postId: number | null
  userId: number | null
}


export type CommentsAvgAggregateInputType = {
  postId?: true
  userId?: true
}

export type CommentsSumAggregateInputType = {
  postId?: true
  userId?: true
}

export type CommentsMinAggregateInputType = {
  postId?: true
  userId?: true
}

export type CommentsMaxAggregateInputType = {
  postId?: true
  userId?: true
}

export type AggregateCommentsArgs = {
  where?: CommentsWhereInput
  orderBy?: Enumerable<CommentsOrderByInput>
  cursor?: CommentsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<CommentsDistinctFieldEnum>
  count?: true
  avg?: CommentsAvgAggregateInputType
  sum?: CommentsSumAggregateInputType
  min?: CommentsMinAggregateInputType
  max?: CommentsMaxAggregateInputType
}

export type GetCommentsAggregateType<T extends AggregateCommentsArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetCommentsAggregateScalarType<T[P]>
}

export type GetCommentsAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof CommentsAvgAggregateOutputType ? CommentsAvgAggregateOutputType[P] : never
}
    
    

export type CommentsSelect = {
  uuid?: boolean
  postId?: boolean
  comment?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
}

export type CommentsGetPayload<
  S extends boolean | null | undefined | CommentsArgs,
  U = keyof S
> = S extends true
  ? Comments
  : S extends undefined
  ? never
  : S extends CommentsArgs | FindManyCommentsArgs
  ? 'include' extends U
    ? Comments 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Comments ? Comments[P]
: 
 never
    }
  : Comments
: Comments


export interface CommentsDelegate {
  /**
   * Find zero or one Comments.
   * @param {FindOneCommentsArgs} args - Arguments to find a Comments
   * @example
   * // Get one Comments
   * const comments = await prisma.comments.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneCommentsArgs>(
    args: Subset<T, FindOneCommentsArgs>
  ): CheckSelect<T, Prisma__CommentsClient<Comments | null>, Prisma__CommentsClient<CommentsGetPayload<T> | null>>
  /**
   * Find zero or more Comments.
   * @param {FindManyCommentsArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Comments
   * const comments = await prisma.comments.findMany()
   * 
   * // Get first 10 Comments
   * const comments = await prisma.comments.findMany({ take: 10 })
   * 
   * // Only select the `uuid`
   * const commentsWithUuidOnly = await prisma.comments.findMany({ select: { uuid: true } })
   * 
  **/
  findMany<T extends FindManyCommentsArgs>(
    args?: Subset<T, FindManyCommentsArgs>
  ): CheckSelect<T, Promise<Array<Comments>>, Promise<Array<CommentsGetPayload<T>>>>
  /**
   * Create a Comments.
   * @param {CommentsCreateArgs} args - Arguments to create a Comments.
   * @example
   * // Create one Comments
   * const Comments = await prisma.comments.create({
   *   data: {
   *     // ... data to create a Comments
   *   }
   * })
   * 
  **/
  create<T extends CommentsCreateArgs>(
    args: Subset<T, CommentsCreateArgs>
  ): CheckSelect<T, Prisma__CommentsClient<Comments>, Prisma__CommentsClient<CommentsGetPayload<T>>>
  /**
   * Delete a Comments.
   * @param {CommentsDeleteArgs} args - Arguments to delete one Comments.
   * @example
   * // Delete one Comments
   * const Comments = await prisma.comments.delete({
   *   where: {
   *     // ... filter to delete one Comments
   *   }
   * })
   * 
  **/
  delete<T extends CommentsDeleteArgs>(
    args: Subset<T, CommentsDeleteArgs>
  ): CheckSelect<T, Prisma__CommentsClient<Comments>, Prisma__CommentsClient<CommentsGetPayload<T>>>
  /**
   * Update one Comments.
   * @param {CommentsUpdateArgs} args - Arguments to update one Comments.
   * @example
   * // Update one Comments
   * const comments = await prisma.comments.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends CommentsUpdateArgs>(
    args: Subset<T, CommentsUpdateArgs>
  ): CheckSelect<T, Prisma__CommentsClient<Comments>, Prisma__CommentsClient<CommentsGetPayload<T>>>
  /**
   * Delete zero or more Comments.
   * @param {CommentsDeleteManyArgs} args - Arguments to filter Comments to delete.
   * @example
   * // Delete a few Comments
   * const { count } = await prisma.comments.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends CommentsDeleteManyArgs>(
    args: Subset<T, CommentsDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Comments.
   * @param {CommentsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Comments
   * const comments = await prisma.comments.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends CommentsUpdateManyArgs>(
    args: Subset<T, CommentsUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Comments.
   * @param {CommentsUpsertArgs} args - Arguments to update or create a Comments.
   * @example
   * // Update or create a Comments
   * const comments = await prisma.comments.upsert({
   *   create: {
   *     // ... data to create a Comments
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Comments we want to update
   *   }
   * })
  **/
  upsert<T extends CommentsUpsertArgs>(
    args: Subset<T, CommentsUpsertArgs>
  ): CheckSelect<T, Prisma__CommentsClient<Comments>, Prisma__CommentsClient<CommentsGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyCommentsArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateCommentsArgs>(args: Subset<T, AggregateCommentsArgs>): Promise<GetCommentsAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Comments.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__CommentsClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Comments findOne
 */
export type FindOneCommentsArgs = {
  /**
   * Select specific fields to fetch from the Comments
  **/
  select?: CommentsSelect | null
  /**
   * Filter, which Comments to fetch.
  **/
  where: CommentsWhereUniqueInput
}


/**
 * Comments findMany
 */
export type FindManyCommentsArgs = {
  /**
   * Select specific fields to fetch from the Comments
  **/
  select?: CommentsSelect | null
  /**
   * Filter, which Comments to fetch.
  **/
  where?: CommentsWhereInput
  /**
   * Determine the order of the Comments to fetch.
  **/
  orderBy?: Enumerable<CommentsOrderByInput>
  /**
   * Sets the position for listing Comments.
  **/
  cursor?: CommentsWhereUniqueInput
  /**
   * The number of Comments to fetch. If negative number, it will take Comments before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Comments.
  **/
  skip?: number
  distinct?: Enumerable<CommentsDistinctFieldEnum>
}


/**
 * Comments create
 */
export type CommentsCreateArgs = {
  /**
   * Select specific fields to fetch from the Comments
  **/
  select?: CommentsSelect | null
  /**
   * The data needed to create a Comments.
  **/
  data: CommentsCreateInput
}


/**
 * Comments update
 */
export type CommentsUpdateArgs = {
  /**
   * Select specific fields to fetch from the Comments
  **/
  select?: CommentsSelect | null
  /**
   * The data needed to update a Comments.
  **/
  data: CommentsUpdateInput
  /**
   * Choose, which Comments to update.
  **/
  where: CommentsWhereUniqueInput
}


/**
 * Comments updateMany
 */
export type CommentsUpdateManyArgs = {
  data: CommentsUpdateManyMutationInput
  where?: CommentsWhereInput
}


/**
 * Comments upsert
 */
export type CommentsUpsertArgs = {
  /**
   * Select specific fields to fetch from the Comments
  **/
  select?: CommentsSelect | null
  /**
   * The filter to search for the Comments to update in case it exists.
  **/
  where: CommentsWhereUniqueInput
  /**
   * In case the Comments found by the `where` argument doesn't exist, create a new Comments with this data.
  **/
  create: CommentsCreateInput
  /**
   * In case the Comments was found with the provided `where` argument, update it with this data.
  **/
  update: CommentsUpdateInput
}


/**
 * Comments delete
 */
export type CommentsDeleteArgs = {
  /**
   * Select specific fields to fetch from the Comments
  **/
  select?: CommentsSelect | null
  /**
   * Filter which Comments to delete.
  **/
  where: CommentsWhereUniqueInput
}


/**
 * Comments deleteMany
 */
export type CommentsDeleteManyArgs = {
  where?: CommentsWhereInput
}


/**
 * Comments without action
 */
export type CommentsArgs = {
  /**
   * Select specific fields to fetch from the Comments
  **/
  select?: CommentsSelect | null
}



/**
 * Model Posts
 */

export type Posts = {
  uuid: string
  title: string | null
  content: string | null
  userId: string
  createdAt: Date
  updatedAt: Date
  deletedAt: Date | null
}


export type AggregatePosts = {
  count: number
}



export type AggregatePostsArgs = {
  where?: PostsWhereInput
  orderBy?: Enumerable<PostsOrderByInput>
  cursor?: PostsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<PostsDistinctFieldEnum>
  count?: true
}

export type GetPostsAggregateType<T extends AggregatePostsArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type PostsSelect = {
  uuid?: boolean
  title?: boolean
  content?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
}

export type PostsGetPayload<
  S extends boolean | null | undefined | PostsArgs,
  U = keyof S
> = S extends true
  ? Posts
  : S extends undefined
  ? never
  : S extends PostsArgs | FindManyPostsArgs
  ? 'include' extends U
    ? Posts 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Posts ? Posts[P]
: 
 never
    }
  : Posts
: Posts


export interface PostsDelegate {
  /**
   * Find zero or one Posts.
   * @param {FindOnePostsArgs} args - Arguments to find a Posts
   * @example
   * // Get one Posts
   * const posts = await prisma.posts.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnePostsArgs>(
    args: Subset<T, FindOnePostsArgs>
  ): CheckSelect<T, Prisma__PostsClient<Posts | null>, Prisma__PostsClient<PostsGetPayload<T> | null>>
  /**
   * Find zero or more Posts.
   * @param {FindManyPostsArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Posts
   * const posts = await prisma.posts.findMany()
   * 
   * // Get first 10 Posts
   * const posts = await prisma.posts.findMany({ take: 10 })
   * 
   * // Only select the `uuid`
   * const postsWithUuidOnly = await prisma.posts.findMany({ select: { uuid: true } })
   * 
  **/
  findMany<T extends FindManyPostsArgs>(
    args?: Subset<T, FindManyPostsArgs>
  ): CheckSelect<T, Promise<Array<Posts>>, Promise<Array<PostsGetPayload<T>>>>
  /**
   * Create a Posts.
   * @param {PostsCreateArgs} args - Arguments to create a Posts.
   * @example
   * // Create one Posts
   * const Posts = await prisma.posts.create({
   *   data: {
   *     // ... data to create a Posts
   *   }
   * })
   * 
  **/
  create<T extends PostsCreateArgs>(
    args: Subset<T, PostsCreateArgs>
  ): CheckSelect<T, Prisma__PostsClient<Posts>, Prisma__PostsClient<PostsGetPayload<T>>>
  /**
   * Delete a Posts.
   * @param {PostsDeleteArgs} args - Arguments to delete one Posts.
   * @example
   * // Delete one Posts
   * const Posts = await prisma.posts.delete({
   *   where: {
   *     // ... filter to delete one Posts
   *   }
   * })
   * 
  **/
  delete<T extends PostsDeleteArgs>(
    args: Subset<T, PostsDeleteArgs>
  ): CheckSelect<T, Prisma__PostsClient<Posts>, Prisma__PostsClient<PostsGetPayload<T>>>
  /**
   * Update one Posts.
   * @param {PostsUpdateArgs} args - Arguments to update one Posts.
   * @example
   * // Update one Posts
   * const posts = await prisma.posts.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends PostsUpdateArgs>(
    args: Subset<T, PostsUpdateArgs>
  ): CheckSelect<T, Prisma__PostsClient<Posts>, Prisma__PostsClient<PostsGetPayload<T>>>
  /**
   * Delete zero or more Posts.
   * @param {PostsDeleteManyArgs} args - Arguments to filter Posts to delete.
   * @example
   * // Delete a few Posts
   * const { count } = await prisma.posts.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends PostsDeleteManyArgs>(
    args: Subset<T, PostsDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Posts.
   * @param {PostsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Posts
   * const posts = await prisma.posts.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends PostsUpdateManyArgs>(
    args: Subset<T, PostsUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Posts.
   * @param {PostsUpsertArgs} args - Arguments to update or create a Posts.
   * @example
   * // Update or create a Posts
   * const posts = await prisma.posts.upsert({
   *   create: {
   *     // ... data to create a Posts
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Posts we want to update
   *   }
   * })
  **/
  upsert<T extends PostsUpsertArgs>(
    args: Subset<T, PostsUpsertArgs>
  ): CheckSelect<T, Prisma__PostsClient<Posts>, Prisma__PostsClient<PostsGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyPostsArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregatePostsArgs>(args: Subset<T, AggregatePostsArgs>): Promise<GetPostsAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Posts.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__PostsClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Posts findOne
 */
export type FindOnePostsArgs = {
  /**
   * Select specific fields to fetch from the Posts
  **/
  select?: PostsSelect | null
  /**
   * Filter, which Posts to fetch.
  **/
  where: PostsWhereUniqueInput
}


/**
 * Posts findMany
 */
export type FindManyPostsArgs = {
  /**
   * Select specific fields to fetch from the Posts
  **/
  select?: PostsSelect | null
  /**
   * Filter, which Posts to fetch.
  **/
  where?: PostsWhereInput
  /**
   * Determine the order of the Posts to fetch.
  **/
  orderBy?: Enumerable<PostsOrderByInput>
  /**
   * Sets the position for listing Posts.
  **/
  cursor?: PostsWhereUniqueInput
  /**
   * The number of Posts to fetch. If negative number, it will take Posts before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Posts.
  **/
  skip?: number
  distinct?: Enumerable<PostsDistinctFieldEnum>
}


/**
 * Posts create
 */
export type PostsCreateArgs = {
  /**
   * Select specific fields to fetch from the Posts
  **/
  select?: PostsSelect | null
  /**
   * The data needed to create a Posts.
  **/
  data: PostsCreateInput
}


/**
 * Posts update
 */
export type PostsUpdateArgs = {
  /**
   * Select specific fields to fetch from the Posts
  **/
  select?: PostsSelect | null
  /**
   * The data needed to update a Posts.
  **/
  data: PostsUpdateInput
  /**
   * Choose, which Posts to update.
  **/
  where: PostsWhereUniqueInput
}


/**
 * Posts updateMany
 */
export type PostsUpdateManyArgs = {
  data: PostsUpdateManyMutationInput
  where?: PostsWhereInput
}


/**
 * Posts upsert
 */
export type PostsUpsertArgs = {
  /**
   * Select specific fields to fetch from the Posts
  **/
  select?: PostsSelect | null
  /**
   * The filter to search for the Posts to update in case it exists.
  **/
  where: PostsWhereUniqueInput
  /**
   * In case the Posts found by the `where` argument doesn't exist, create a new Posts with this data.
  **/
  create: PostsCreateInput
  /**
   * In case the Posts was found with the provided `where` argument, update it with this data.
  **/
  update: PostsUpdateInput
}


/**
 * Posts delete
 */
export type PostsDeleteArgs = {
  /**
   * Select specific fields to fetch from the Posts
  **/
  select?: PostsSelect | null
  /**
   * Filter which Posts to delete.
  **/
  where: PostsWhereUniqueInput
}


/**
 * Posts deleteMany
 */
export type PostsDeleteManyArgs = {
  where?: PostsWhereInput
}


/**
 * Posts without action
 */
export type PostsArgs = {
  /**
   * Select specific fields to fetch from the Posts
  **/
  select?: PostsSelect | null
}



/**
 * Model SequelizeMeta
 */

export type SequelizeMeta = {
  name: string
}


export type AggregateSequelizeMeta = {
  count: number
}



export type AggregateSequelizeMetaArgs = {
  where?: SequelizeMetaWhereInput
  orderBy?: Enumerable<SequelizeMetaOrderByInput>
  cursor?: SequelizeMetaWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<SequelizeMetaDistinctFieldEnum>
  count?: true
}

export type GetSequelizeMetaAggregateType<T extends AggregateSequelizeMetaArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type SequelizeMetaSelect = {
  name?: boolean
}

export type SequelizeMetaGetPayload<
  S extends boolean | null | undefined | SequelizeMetaArgs,
  U = keyof S
> = S extends true
  ? SequelizeMeta
  : S extends undefined
  ? never
  : S extends SequelizeMetaArgs | FindManySequelizeMetaArgs
  ? 'include' extends U
    ? SequelizeMeta 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof SequelizeMeta ? SequelizeMeta[P]
: 
 never
    }
  : SequelizeMeta
: SequelizeMeta


export interface SequelizeMetaDelegate {
  /**
   * Find zero or one SequelizeMeta.
   * @param {FindOneSequelizeMetaArgs} args - Arguments to find a SequelizeMeta
   * @example
   * // Get one SequelizeMeta
   * const sequelizeMeta = await prisma.sequelizeMeta.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneSequelizeMetaArgs>(
    args: Subset<T, FindOneSequelizeMetaArgs>
  ): CheckSelect<T, Prisma__SequelizeMetaClient<SequelizeMeta | null>, Prisma__SequelizeMetaClient<SequelizeMetaGetPayload<T> | null>>
  /**
   * Find zero or more SequelizeMetas.
   * @param {FindManySequelizeMetaArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SequelizeMetas
   * const sequelizeMetas = await prisma.sequelizeMeta.findMany()
   * 
   * // Get first 10 SequelizeMetas
   * const sequelizeMetas = await prisma.sequelizeMeta.findMany({ take: 10 })
   * 
   * // Only select the `name`
   * const sequelizeMetaWithNameOnly = await prisma.sequelizeMeta.findMany({ select: { name: true } })
   * 
  **/
  findMany<T extends FindManySequelizeMetaArgs>(
    args?: Subset<T, FindManySequelizeMetaArgs>
  ): CheckSelect<T, Promise<Array<SequelizeMeta>>, Promise<Array<SequelizeMetaGetPayload<T>>>>
  /**
   * Create a SequelizeMeta.
   * @param {SequelizeMetaCreateArgs} args - Arguments to create a SequelizeMeta.
   * @example
   * // Create one SequelizeMeta
   * const SequelizeMeta = await prisma.sequelizeMeta.create({
   *   data: {
   *     // ... data to create a SequelizeMeta
   *   }
   * })
   * 
  **/
  create<T extends SequelizeMetaCreateArgs>(
    args: Subset<T, SequelizeMetaCreateArgs>
  ): CheckSelect<T, Prisma__SequelizeMetaClient<SequelizeMeta>, Prisma__SequelizeMetaClient<SequelizeMetaGetPayload<T>>>
  /**
   * Delete a SequelizeMeta.
   * @param {SequelizeMetaDeleteArgs} args - Arguments to delete one SequelizeMeta.
   * @example
   * // Delete one SequelizeMeta
   * const SequelizeMeta = await prisma.sequelizeMeta.delete({
   *   where: {
   *     // ... filter to delete one SequelizeMeta
   *   }
   * })
   * 
  **/
  delete<T extends SequelizeMetaDeleteArgs>(
    args: Subset<T, SequelizeMetaDeleteArgs>
  ): CheckSelect<T, Prisma__SequelizeMetaClient<SequelizeMeta>, Prisma__SequelizeMetaClient<SequelizeMetaGetPayload<T>>>
  /**
   * Update one SequelizeMeta.
   * @param {SequelizeMetaUpdateArgs} args - Arguments to update one SequelizeMeta.
   * @example
   * // Update one SequelizeMeta
   * const sequelizeMeta = await prisma.sequelizeMeta.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends SequelizeMetaUpdateArgs>(
    args: Subset<T, SequelizeMetaUpdateArgs>
  ): CheckSelect<T, Prisma__SequelizeMetaClient<SequelizeMeta>, Prisma__SequelizeMetaClient<SequelizeMetaGetPayload<T>>>
  /**
   * Delete zero or more SequelizeMetas.
   * @param {SequelizeMetaDeleteManyArgs} args - Arguments to filter SequelizeMetas to delete.
   * @example
   * // Delete a few SequelizeMetas
   * const { count } = await prisma.sequelizeMeta.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends SequelizeMetaDeleteManyArgs>(
    args: Subset<T, SequelizeMetaDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more SequelizeMetas.
   * @param {SequelizeMetaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SequelizeMetas
   * const sequelizeMeta = await prisma.sequelizeMeta.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends SequelizeMetaUpdateManyArgs>(
    args: Subset<T, SequelizeMetaUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one SequelizeMeta.
   * @param {SequelizeMetaUpsertArgs} args - Arguments to update or create a SequelizeMeta.
   * @example
   * // Update or create a SequelizeMeta
   * const sequelizeMeta = await prisma.sequelizeMeta.upsert({
   *   create: {
   *     // ... data to create a SequelizeMeta
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SequelizeMeta we want to update
   *   }
   * })
  **/
  upsert<T extends SequelizeMetaUpsertArgs>(
    args: Subset<T, SequelizeMetaUpsertArgs>
  ): CheckSelect<T, Prisma__SequelizeMetaClient<SequelizeMeta>, Prisma__SequelizeMetaClient<SequelizeMetaGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManySequelizeMetaArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateSequelizeMetaArgs>(args: Subset<T, AggregateSequelizeMetaArgs>): Promise<GetSequelizeMetaAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for SequelizeMeta.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__SequelizeMetaClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * SequelizeMeta findOne
 */
export type FindOneSequelizeMetaArgs = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
  **/
  select?: SequelizeMetaSelect | null
  /**
   * Filter, which SequelizeMeta to fetch.
  **/
  where: SequelizeMetaWhereUniqueInput
}


/**
 * SequelizeMeta findMany
 */
export type FindManySequelizeMetaArgs = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
  **/
  select?: SequelizeMetaSelect | null
  /**
   * Filter, which SequelizeMetas to fetch.
  **/
  where?: SequelizeMetaWhereInput
  /**
   * Determine the order of the SequelizeMetas to fetch.
  **/
  orderBy?: Enumerable<SequelizeMetaOrderByInput>
  /**
   * Sets the position for listing SequelizeMetas.
  **/
  cursor?: SequelizeMetaWhereUniqueInput
  /**
   * The number of SequelizeMetas to fetch. If negative number, it will take SequelizeMetas before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` SequelizeMetas.
  **/
  skip?: number
  distinct?: Enumerable<SequelizeMetaDistinctFieldEnum>
}


/**
 * SequelizeMeta create
 */
export type SequelizeMetaCreateArgs = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
  **/
  select?: SequelizeMetaSelect | null
  /**
   * The data needed to create a SequelizeMeta.
  **/
  data: SequelizeMetaCreateInput
}


/**
 * SequelizeMeta update
 */
export type SequelizeMetaUpdateArgs = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
  **/
  select?: SequelizeMetaSelect | null
  /**
   * The data needed to update a SequelizeMeta.
  **/
  data: SequelizeMetaUpdateInput
  /**
   * Choose, which SequelizeMeta to update.
  **/
  where: SequelizeMetaWhereUniqueInput
}


/**
 * SequelizeMeta updateMany
 */
export type SequelizeMetaUpdateManyArgs = {
  data: SequelizeMetaUpdateManyMutationInput
  where?: SequelizeMetaWhereInput
}


/**
 * SequelizeMeta upsert
 */
export type SequelizeMetaUpsertArgs = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
  **/
  select?: SequelizeMetaSelect | null
  /**
   * The filter to search for the SequelizeMeta to update in case it exists.
  **/
  where: SequelizeMetaWhereUniqueInput
  /**
   * In case the SequelizeMeta found by the `where` argument doesn't exist, create a new SequelizeMeta with this data.
  **/
  create: SequelizeMetaCreateInput
  /**
   * In case the SequelizeMeta was found with the provided `where` argument, update it with this data.
  **/
  update: SequelizeMetaUpdateInput
}


/**
 * SequelizeMeta delete
 */
export type SequelizeMetaDeleteArgs = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
  **/
  select?: SequelizeMetaSelect | null
  /**
   * Filter which SequelizeMeta to delete.
  **/
  where: SequelizeMetaWhereUniqueInput
}


/**
 * SequelizeMeta deleteMany
 */
export type SequelizeMetaDeleteManyArgs = {
  where?: SequelizeMetaWhereInput
}


/**
 * SequelizeMeta without action
 */
export type SequelizeMetaArgs = {
  /**
   * Select specific fields to fetch from the SequelizeMeta
  **/
  select?: SequelizeMetaSelect | null
}



/**
 * Model Users
 */

export type Users = {
  uuid: string
  name: string
  lastname: string
  email: string
  password: string
  createdAt: Date
  updatedAt: Date
  deletedAt: Date | null
}


export type AggregateUsers = {
  count: number
}



export type AggregateUsersArgs = {
  where?: UsersWhereInput
  orderBy?: Enumerable<UsersOrderByInput>
  cursor?: UsersWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UsersDistinctFieldEnum>
  count?: true
}

export type GetUsersAggregateType<T extends AggregateUsersArgs> = {
  [P in keyof T]: P extends 'count' ? number : never
}


    
    

export type UsersSelect = {
  uuid?: boolean
  name?: boolean
  lastname?: boolean
  email?: boolean
  password?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
}

export type UsersGetPayload<
  S extends boolean | null | undefined | UsersArgs,
  U = keyof S
> = S extends true
  ? Users
  : S extends undefined
  ? never
  : S extends UsersArgs | FindManyUsersArgs
  ? 'include' extends U
    ? Users 
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Users ? Users[P]
: 
 never
    }
  : Users
: Users


export interface UsersDelegate {
  /**
   * Find zero or one Users.
   * @param {FindOneUsersArgs} args - Arguments to find a Users
   * @example
   * // Get one Users
   * const users = await prisma.users.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUsersArgs>(
    args: Subset<T, FindOneUsersArgs>
  ): CheckSelect<T, Prisma__UsersClient<Users | null>, Prisma__UsersClient<UsersGetPayload<T> | null>>
  /**
   * Find zero or more Users.
   * @param {FindManyUsersArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.users.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.users.findMany({ take: 10 })
   * 
   * // Only select the `uuid`
   * const usersWithUuidOnly = await prisma.users.findMany({ select: { uuid: true } })
   * 
  **/
  findMany<T extends FindManyUsersArgs>(
    args?: Subset<T, FindManyUsersArgs>
  ): CheckSelect<T, Promise<Array<Users>>, Promise<Array<UsersGetPayload<T>>>>
  /**
   * Create a Users.
   * @param {UsersCreateArgs} args - Arguments to create a Users.
   * @example
   * // Create one Users
   * const Users = await prisma.users.create({
   *   data: {
   *     // ... data to create a Users
   *   }
   * })
   * 
  **/
  create<T extends UsersCreateArgs>(
    args: Subset<T, UsersCreateArgs>
  ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>
  /**
   * Delete a Users.
   * @param {UsersDeleteArgs} args - Arguments to delete one Users.
   * @example
   * // Delete one Users
   * const Users = await prisma.users.delete({
   *   where: {
   *     // ... filter to delete one Users
   *   }
   * })
   * 
  **/
  delete<T extends UsersDeleteArgs>(
    args: Subset<T, UsersDeleteArgs>
  ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>
  /**
   * Update one Users.
   * @param {UsersUpdateArgs} args - Arguments to update one Users.
   * @example
   * // Update one Users
   * const users = await prisma.users.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends UsersUpdateArgs>(
    args: Subset<T, UsersUpdateArgs>
  ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>
  /**
   * Delete zero or more Users.
   * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.users.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UsersDeleteManyArgs>(
    args: Subset<T, UsersDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const users = await prisma.users.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UsersUpdateManyArgs>(
    args: Subset<T, UsersUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Users.
   * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
   * @example
   * // Update or create a Users
   * const users = await prisma.users.upsert({
   *   create: {
   *     // ... data to create a Users
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Users we want to update
   *   }
   * })
  **/
  upsert<T extends UsersUpsertArgs>(
    args: Subset<T, UsersUpsertArgs>
  ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyUsersArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateUsersArgs>(args: Subset<T, AggregateUsersArgs>): Promise<GetUsersAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Users.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__UsersClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Users findOne
 */
export type FindOneUsersArgs = {
  /**
   * Select specific fields to fetch from the Users
  **/
  select?: UsersSelect | null
  /**
   * Filter, which Users to fetch.
  **/
  where: UsersWhereUniqueInput
}


/**
 * Users findMany
 */
export type FindManyUsersArgs = {
  /**
   * Select specific fields to fetch from the Users
  **/
  select?: UsersSelect | null
  /**
   * Filter, which Users to fetch.
  **/
  where?: UsersWhereInput
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: Enumerable<UsersOrderByInput>
  /**
   * Sets the position for listing Users.
  **/
  cursor?: UsersWhereUniqueInput
  /**
   * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Users.
  **/
  skip?: number
  distinct?: Enumerable<UsersDistinctFieldEnum>
}


/**
 * Users create
 */
export type UsersCreateArgs = {
  /**
   * Select specific fields to fetch from the Users
  **/
  select?: UsersSelect | null
  /**
   * The data needed to create a Users.
  **/
  data: UsersCreateInput
}


/**
 * Users update
 */
export type UsersUpdateArgs = {
  /**
   * Select specific fields to fetch from the Users
  **/
  select?: UsersSelect | null
  /**
   * The data needed to update a Users.
  **/
  data: UsersUpdateInput
  /**
   * Choose, which Users to update.
  **/
  where: UsersWhereUniqueInput
}


/**
 * Users updateMany
 */
export type UsersUpdateManyArgs = {
  data: UsersUpdateManyMutationInput
  where?: UsersWhereInput
}


/**
 * Users upsert
 */
export type UsersUpsertArgs = {
  /**
   * Select specific fields to fetch from the Users
  **/
  select?: UsersSelect | null
  /**
   * The filter to search for the Users to update in case it exists.
  **/
  where: UsersWhereUniqueInput
  /**
   * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
  **/
  create: UsersCreateInput
  /**
   * In case the Users was found with the provided `where` argument, update it with this data.
  **/
  update: UsersUpdateInput
}


/**
 * Users delete
 */
export type UsersDeleteArgs = {
  /**
   * Select specific fields to fetch from the Users
  **/
  select?: UsersSelect | null
  /**
   * Filter which Users to delete.
  **/
  where: UsersWhereUniqueInput
}


/**
 * Users deleteMany
 */
export type UsersDeleteManyArgs = {
  where?: UsersWhereInput
}


/**
 * Users without action
 */
export type UsersArgs = {
  /**
   * Select specific fields to fetch from the Users
  **/
  select?: UsersSelect | null
}



/**
 * Deep Input Types
 */


export type CommentsWhereInput = {
  AND?: Enumerable<CommentsWhereInput>
  OR?: Array<CommentsWhereInput>
  NOT?: Enumerable<CommentsWhereInput>
  uuid?: string | StringFilter
  postId?: number | IntNullableFilter | null
  comment?: string | StringNullableFilter | null
  userId?: number | IntNullableFilter | null
  createdAt?: Date | string | DateTimeFilter
  updatedAt?: Date | string | DateTimeFilter
  deletedAt?: Date | string | DateTimeNullableFilter | null
}

export type CommentsOrderByInput = {
  uuid?: SortOrder
  postId?: SortOrder
  comment?: SortOrder
  userId?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
  deletedAt?: SortOrder
}

export type CommentsWhereUniqueInput = {
  uuid?: string
}

export type PostsWhereInput = {
  AND?: Enumerable<PostsWhereInput>
  OR?: Array<PostsWhereInput>
  NOT?: Enumerable<PostsWhereInput>
  uuid?: string | StringFilter
  title?: string | StringNullableFilter | null
  content?: string | StringNullableFilter | null
  userId?: string | StringFilter
  createdAt?: Date | string | DateTimeFilter
  updatedAt?: Date | string | DateTimeFilter
  deletedAt?: Date | string | DateTimeNullableFilter | null
}

export type PostsOrderByInput = {
  uuid?: SortOrder
  title?: SortOrder
  content?: SortOrder
  userId?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
  deletedAt?: SortOrder
}

export type PostsWhereUniqueInput = {
  uuid?: string
}

export type SequelizeMetaWhereInput = {
  AND?: Enumerable<SequelizeMetaWhereInput>
  OR?: Array<SequelizeMetaWhereInput>
  NOT?: Enumerable<SequelizeMetaWhereInput>
  name?: string | StringFilter
}

export type SequelizeMetaOrderByInput = {
  name?: SortOrder
}

export type SequelizeMetaWhereUniqueInput = {
  name?: string
}

export type UsersWhereInput = {
  AND?: Enumerable<UsersWhereInput>
  OR?: Array<UsersWhereInput>
  NOT?: Enumerable<UsersWhereInput>
  uuid?: string | StringFilter
  name?: string | StringFilter
  lastname?: string | StringFilter
  email?: string | StringFilter
  password?: string | StringFilter
  createdAt?: Date | string | DateTimeFilter
  updatedAt?: Date | string | DateTimeFilter
  deletedAt?: Date | string | DateTimeNullableFilter | null
}

export type UsersOrderByInput = {
  uuid?: SortOrder
  name?: SortOrder
  lastname?: SortOrder
  email?: SortOrder
  password?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
  deletedAt?: SortOrder
}

export type UsersWhereUniqueInput = {
  uuid?: string
}

export type CommentsCreateInput = {
  uuid: string
  postId?: number | null
  comment?: string | null
  userId?: number | null
  createdAt: Date | string
  updatedAt: Date | string
  deletedAt?: Date | string | null
}

export type CommentsUpdateInput = {
  uuid?: string | StringFieldUpdateOperationsInput
  postId?: number | NullableIntFieldUpdateOperationsInput | null
  comment?: string | NullableStringFieldUpdateOperationsInput | null
  userId?: number | NullableIntFieldUpdateOperationsInput | null
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  deletedAt?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
}

export type CommentsUpdateManyMutationInput = {
  uuid?: string | StringFieldUpdateOperationsInput
  postId?: number | NullableIntFieldUpdateOperationsInput | null
  comment?: string | NullableStringFieldUpdateOperationsInput | null
  userId?: number | NullableIntFieldUpdateOperationsInput | null
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  deletedAt?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
}

export type PostsCreateInput = {
  uuid: string
  title?: string | null
  content?: string | null
  userId: string
  createdAt: Date | string
  updatedAt: Date | string
  deletedAt?: Date | string | null
}

export type PostsUpdateInput = {
  uuid?: string | StringFieldUpdateOperationsInput
  title?: string | NullableStringFieldUpdateOperationsInput | null
  content?: string | NullableStringFieldUpdateOperationsInput | null
  userId?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  deletedAt?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
}

export type PostsUpdateManyMutationInput = {
  uuid?: string | StringFieldUpdateOperationsInput
  title?: string | NullableStringFieldUpdateOperationsInput | null
  content?: string | NullableStringFieldUpdateOperationsInput | null
  userId?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  deletedAt?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
}

export type SequelizeMetaCreateInput = {
  name: string
}

export type SequelizeMetaUpdateInput = {
  name?: string | StringFieldUpdateOperationsInput
}

export type SequelizeMetaUpdateManyMutationInput = {
  name?: string | StringFieldUpdateOperationsInput
}

export type UsersCreateInput = {
  uuid: string
  name: string
  lastname: string
  email: string
  password: string
  createdAt: Date | string
  updatedAt: Date | string
  deletedAt?: Date | string | null
}

export type UsersUpdateInput = {
  uuid?: string | StringFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  lastname?: string | StringFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  deletedAt?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
}

export type UsersUpdateManyMutationInput = {
  uuid?: string | StringFieldUpdateOperationsInput
  name?: string | StringFieldUpdateOperationsInput
  lastname?: string | StringFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  deletedAt?: Date | string | NullableDateTimeFieldUpdateOperationsInput | null
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type IntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
  not?: number | NestedIntNullableFilter | null
}

export type StringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
  not?: string | NestedStringNullableFilter | null
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date | string>
  notIn?: Enumerable<Date | string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type DateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
  not?: Date | string | NestedDateTimeNullableFilter | null
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: NestedStringFilter | null
}

export type NestedIntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
  not?: NestedIntNullableFilter | null
}

export type NestedStringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
  not?: NestedStringNullableFilter | null
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date | string>
  notIn?: Enumerable<Date | string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: NestedDateTimeFilter | null
}

export type NestedDateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
  not?: NestedDateTimeNullableFilter | null
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
